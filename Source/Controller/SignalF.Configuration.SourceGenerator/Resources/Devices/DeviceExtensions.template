﻿<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".g.cs" #>
<# string className = (string)Session["className"];#>
<# string classNamespace = (string)Session["classNamespace"];#>
<# string globalNamespace = (string)Session["globalNamespace"];#>

// <auto-generated />
#pragma warning disable

using Microsoft.Extensions.DependencyInjection;
using SignalF.Configuration;
using SignalF.Configuration.Devices;
using SignalF.Controller.Configuration;
using SignalF.Datamodel.Hardware;

namespace <#= classNamespace #>;

public static partial class DeviceExtensions
{
    // Configuration
    public static ISignalFConfiguration Add<#= className #>DeviceConfiguration(this ISignalFConfiguration configuration, Action<I<#= className #>ConfigurationBuilder> builder)
    {
        return configuration.AddDeviceConfiguration<I<#= className #>ConfigurationBuilder, <#= className #>DeviceOptions>(builder);
    }

    public static ISignalFConfiguration Add<#= className #>DeviceConfiguration<TType>(this ISignalFConfiguration configuration, Action<I<#= className #>ConfigurationBuilder> builder)
        where TType : <#= className #>
    {
        return configuration.AddDeviceConfiguration<I<#= className #>ConfigurationBuilder, <#= className #>DeviceOptions, TType>(builder);
    }

    // Definition
    public static ISignalFConfiguration Add<#= className #>DeviceDefinition(this ISignalFConfiguration configuration, Action<I<#= className #>DefinitionBuilder> builder)
    {
        return configuration.AddDeviceDefinition<I<#= className #>DefinitionBuilder, <#= className #>DeviceOptions>(builder);
    }

    public static ISignalFConfiguration Add<#= className #>DeviceDefinition<TType>(this ISignalFConfiguration configuration, Action<I<#= className #>DefinitionBuilder> builder)
        where TType : <#= className #>
    {
        return configuration.AddDeviceDefinition<I<#= className #>DefinitionBuilder, <#= className #>DeviceOptions, TType>(builder);
    }

    // Template
    public static ISignalFConfiguration Add<#= className #>DeviceTemplate(this ISignalFConfiguration configuration, Action<I<#= className #>TemplateBuilder> builder)
    {
        return configuration.AddDeviceTemplate<I<#= className #>TemplateBuilder, <#= className #>DeviceOptions>(builder);
    }

    public static ISignalFConfiguration Add<#= className #>DeviceTemplate<TType>(this ISignalFConfiguration configuration, Action<I<#= className #>TemplateBuilder> builder)
        where TType : <#= className #>
    {
        return configuration.AddDeviceTemplate<I<#= className #>TemplateBuilder, <#= className #>DeviceOptions, TType>(builder);
    }

    public static IServiceCollection Add<#= className #>(this IServiceCollection services)
    {
        return services.AddTransient<<#= className #>>()
                       .AddTransient<I<#= className #>ConfigurationBuilder, <#= className #>ConfigurationBuilder>()
                       .AddTransient<I<#= className #>DefinitionBuilder, <#= className #>DefinitionBuilder>()
                       .AddTransient<I<#= className #>TemplateBuilder, <#= className #>TemplateBuilder>();
    }
}
