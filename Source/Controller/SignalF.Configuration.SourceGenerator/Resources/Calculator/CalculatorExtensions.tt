﻿<#@ template language="C#" #>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #pragma warning disable

using Microsoft.Extensions.DependencyInjection;
using SignalF.Configuration;

namespace <#= _classNamespace #>;

public static partial class CalculatorExtensions
{
    // Configuration
    public static ISignalFConfiguration Add<#= _className #>CalculatorConfiguration(this ISignalFConfiguration configuration, Action<I<#= _className #>CalculatorConfigurationBuilder> builder)
    {
        return configuration.AddCalculatorConfiguration<I<#= _className #>CalculatorConfigurationBuilder, <#= _className #>CalculatorOptions>(builder);
    }

    public static ISignalFConfiguration Add<#= _className #>CalculatorConfiguration<TType>(this ISignalFConfiguration configuration, Action<I<#= _className #>CalculatorConfigurationBuilder> builder)
        where TType : <#= _className #>
    {
        return configuration.AddCalculatorConfiguration<I<#= _className #>CalculatorConfigurationBuilder, <#= _className #>CalculatorOptions, TType>(builder);
    }

    // Definition
    public static ISignalFConfiguration Add<#= _className #>CalculatorDefinition(this ISignalFConfiguration configuration, Action<I<#= _className #>CalculatorDefinitionBuilder> builder)
    {
        return configuration.AddCalculatorDefinition<I<#= _className #>CalculatorDefinitionBuilder, <#= _className #>CalculatorOptions>(builder);
    }

    public static ISignalFConfiguration Add<#= _className #>CalculatorDefinition<TType>(this ISignalFConfiguration configuration, Action<I<#= _className #>CalculatorDefinitionBuilder> builder)
        where TType : <#= _className #>
    {
        return configuration.AddCalculatorDefinition<I<#= _className #>CalculatorDefinitionBuilder, <#= _className #>CalculatorOptions, TType>(builder);
    }

    // Template
    public static ISignalFConfiguration Add<#= _className #>CalculatorTemplate(this ISignalFConfiguration configuration, Action<I<#= _className #>CalculatorTemplateBuilder> builder)
    {
        return configuration.AddCalculatorTemplate<I<#= _className #>CalculatorTemplateBuilder, <#= _className #>CalculatorOptions>(builder);
    }

    public static ISignalFConfiguration Add<#= _className #>CalculatorTemplate<TType>(this ISignalFConfiguration configuration, Action<I<#= _className #>CalculatorTemplateBuilder> builder)
        where TType : <#= _className #>
    {
        return configuration.AddCalculatorTemplate<I<#= _className #>CalculatorTemplateBuilder, <#= _className #>CalculatorOptions, TType>(builder);
    }

    public static IServiceCollection Add<#= _className #>(this IServiceCollection services)
    {
        return services.AddTransient<<#= _className #>>()
                       .AddTransient<I<#= _className #>CalculatorConfigurationBuilder, <#= _className #>CalculatorConfigurationBuilder>()
                       .AddTransient<I<#= _className #>CalculatorDefinitionBuilder, <#= _className #>CalculatorDefinitionBuilder>()
                       .AddTransient<I<#= _className #>CalculatorTemplateBuilder, <#= _className #>CalculatorTemplateBuilder>();
    }
}
