﻿<#@ template language="C#" #>
<#@ parameter type="string" name="className"#>
<#@ parameter type="string" name="classNamespace"#>
<#@ parameter type="string" name="globalNamespace"#>

// <auto-generated />
#pragma warning disable

using Microsoft.Extensions.DependencyInjection;
using SignalF.Configuration;

namespace <#= classNamespace #>;

public static partial class CalculatorExtensions
{
    // Configuration
    public static ISignalFConfiguration Add<#= className #>Configuration(this ISignalFConfiguration configuration, Action<I<#= className #>ConfigurationBuilder> builder)
    {
        return configuration.AddCalculatorConfiguration<I<#= className #>ConfigurationBuilder, <#= className #>Options>(builder);
    }

    public static ISignalFConfiguration Add<#= className #>Configuration<TType>(this ISignalFConfiguration configuration, Action<I<#= className #>ConfigurationBuilder> builder)
        where TType : <#= className #>
    {
        return configuration.AddCalculatorConfiguration<I<#= className #>ConfigurationBuilder, <#= className #>Options, TType>(builder);
    }

    // Definition
    public static ISignalFConfiguration Add<#= className #>Definition(this ISignalFConfiguration configuration, Action<I<#= className #>DefinitionBuilder> builder)
    {
        return configuration.AddCalculatorDefinition<I<#= className #>DefinitionBuilder, <#= className #>Options>(builder);
    }

    public static ISignalFConfiguration Add<#= className #>Definition<TType>(this ISignalFConfiguration configuration, Action<I<#= className #>DefinitionBuilder> builder)
        where TType : <#= className #>
    {
        return configuration.AddCalculatorDefinition<I<#= className #>DefinitionBuilder, <#= className #>Options, TType>(builder);
    }

    // Template
    public static ISignalFConfiguration Add<#= className #>Template(this ISignalFConfiguration configuration, Action<I<#= className #>TemplateBuilder> builder)
    {
        return configuration.Add<#= className #>Template<<#= className #>>(builder);
    }

    public static ISignalFConfiguration Add<#= className #>Template<TType>(this ISignalFConfiguration configuration, Action<I<#= className #>TemplateBuilder> builder)
        where TType : <#= className #>
    {
        return configuration.AddCalculatorTemplate<I<#= className #>TemplateBuilder, <#= className #>Options, TType>(builder);
    }

    public static IServiceCollection Add<#= className #>(this IServiceCollection services)
    {
        return services.AddTransient<<#= className #>>()
                       .AddTransient<I<#= className #>ConfigurationBuilder, <#= className #>ConfigurationBuilder>()
                       .AddTransient<I<#= className #>DefinitionBuilder, <#= className #>DefinitionBuilder>()
                       .AddTransient<I<#= className #>TemplateBuilder, <#= className #>TemplateBuilder>();
    }
}
