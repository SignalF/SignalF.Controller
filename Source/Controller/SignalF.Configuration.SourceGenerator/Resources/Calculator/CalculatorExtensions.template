﻿<#@ template language="C#" #>
<#@ parameter type="string" name="className"#>
<#@ parameter type="string" name="classNamespace"#>
<#@ parameter type="string" name="globalNamespace"#>

// <auto-generated />
#pragma warning disable

using Microsoft.Extensions.DependencyInjection;
using SignalF.Configuration;

namespace <#= classNamespace #>;

public static partial class CalculatorExtensions
{
    // Configuration
    public static ISignalFConfiguration Add<#= className #>CalculatorConfiguration(this ISignalFConfiguration configuration, Action<I<#= className #>CalculatorConfigurationBuilder> builder)
    {
        return configuration.AddCalculatorConfiguration<I<#= className #>CalculatorConfigurationBuilder, <#= className #>CalculatorOptions>(builder);
    }

    public static ISignalFConfiguration Add<#= className #>CalculatorConfiguration<TType>(this ISignalFConfiguration configuration, Action<I<#= className #>CalculatorConfigurationBuilder> builder)
        where TType : <#= className #>
    {
        return configuration.AddCalculatorConfiguration<I<#= className #>CalculatorConfigurationBuilder, <#= className #>CalculatorOptions, TType>(builder);
    }

    // Definition
    public static ISignalFConfiguration Add<#= className #>CalculatorDefinition(this ISignalFConfiguration configuration, Action<I<#= className #>CalculatorDefinitionBuilder> builder)
    {
        return configuration.AddCalculatorDefinition<I<#= className #>CalculatorDefinitionBuilder, <#= className #>CalculatorOptions>(builder);
    }

    public static ISignalFConfiguration Add<#= className #>CalculatorDefinition<TType>(this ISignalFConfiguration configuration, Action<I<#= className #>CalculatorDefinitionBuilder> builder)
        where TType : <#= className #>
    {
        return configuration.AddCalculatorDefinition<I<#= className #>CalculatorDefinitionBuilder, <#= className #>CalculatorOptions, TType>(builder);
    }

    // Template
    public static ISignalFConfiguration Add<#= className #>CalculatorTemplate(this ISignalFConfiguration configuration, Action<I<#= className #>CalculatorTemplateBuilder> builder)
    {
        return configuration.AddCalculatorTemplate<I<#= className #>CalculatorTemplateBuilder, <#= className #>CalculatorOptions>(builder);
    }

    public static ISignalFConfiguration Add<#= className #>CalculatorTemplate<TType>(this ISignalFConfiguration configuration, Action<I<#= className #>CalculatorTemplateBuilder> builder)
        where TType : <#= className #>
    {
        return configuration.AddCalculatorTemplate<I<#= className #>CalculatorTemplateBuilder, <#= className #>CalculatorOptions, TType>(builder);
    }

    public static IServiceCollection Add<#= className #>(this IServiceCollection services)
    {
        return services.AddTransient<<#= className #>>()
                       .AddTransient<I<#= className #>CalculatorConfigurationBuilder, <#= className #>CalculatorConfigurationBuilder>()
                       .AddTransient<I<#= className #>CalculatorDefinitionBuilder, <#= className #>CalculatorDefinitionBuilder>()
                       .AddTransient<I<#= className #>CalculatorTemplateBuilder, <#= className #>CalculatorTemplateBuilder>();
    }
}
