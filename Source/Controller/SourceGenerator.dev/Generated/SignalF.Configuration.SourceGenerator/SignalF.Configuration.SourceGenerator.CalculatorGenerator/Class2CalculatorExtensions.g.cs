﻿
// <auto-generated />
#pragma warning disable

using Microsoft.Extensions.DependencyInjection;
using SignalF.Configuration;

namespace SourceGenerator.dev;

public static partial class CalculatorExtensions
{
    // Configuration
    public static ISignalFConfiguration AddClass2CalculatorConfiguration(this ISignalFConfiguration configuration, Action<IClass2CalculatorConfigurationBuilder> builder)
    {
        return configuration.AddCalculatorConfiguration<IClass2CalculatorConfigurationBuilder, Class2CalculatorOptions>(builder);
    }

    public static ISignalFConfiguration AddClass2CalculatorConfiguration<TType>(this ISignalFConfiguration configuration, Action<IClass2CalculatorConfigurationBuilder> builder)
        where TType : Class2
    {
        return configuration.AddCalculatorConfiguration<IClass2CalculatorConfigurationBuilder, Class2CalculatorOptions, TType>(builder);
    }

    // Definition
    public static ISignalFConfiguration AddClass2CalculatorDefinition(this ISignalFConfiguration configuration, Action<IClass2CalculatorDefinitionBuilder> builder)
    {
        return configuration.AddCalculatorDefinition<IClass2CalculatorDefinitionBuilder, Class2CalculatorOptions>(builder);
    }

    public static ISignalFConfiguration AddClass2CalculatorDefinition<TType>(this ISignalFConfiguration configuration, Action<IClass2CalculatorDefinitionBuilder> builder)
        where TType : Class2
    {
        return configuration.AddCalculatorDefinition<IClass2CalculatorDefinitionBuilder, Class2CalculatorOptions, TType>(builder);
    }

    // Template
    public static ISignalFConfiguration AddClass2CalculatorTemplate(this ISignalFConfiguration configuration, Action<IClass2CalculatorTemplateBuilder> builder)
    {
        return configuration.AddCalculatorTemplate<IClass2CalculatorTemplateBuilder, Class2CalculatorOptions>(builder);
    }

    public static ISignalFConfiguration AddClass2CalculatorTemplate<TType>(this ISignalFConfiguration configuration, Action<IClass2CalculatorTemplateBuilder> builder)
        where TType : Class2
    {
        return configuration.AddCalculatorTemplate<IClass2CalculatorTemplateBuilder, Class2CalculatorOptions, TType>(builder);
    }

    public static IServiceCollection AddClass2(this IServiceCollection services)
    {
        return services.AddTransient<Class2>()
                       .AddTransient<IClass2CalculatorConfigurationBuilder, Class2CalculatorConfigurationBuilder>()
                       .AddTransient<IClass2CalculatorDefinitionBuilder, Class2CalculatorDefinitionBuilder>()
                       .AddTransient<IClass2CalculatorTemplateBuilder, Class2CalculatorTemplateBuilder>();
    }
}
